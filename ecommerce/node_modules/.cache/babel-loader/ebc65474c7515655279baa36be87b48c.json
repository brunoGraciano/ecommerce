{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\src\\\\components\\\\Categorization\\\\Categorization.js\";\nimport React, { Component } from \"react\";\nimport \"./Categorization.css\";\nimport { connect } from \"react-redux\";\nimport { fetchCatalog, createCategory, removeCategory, createSubcategory, removeSubcategory, editCategory } from \"../../store/actions/indexStore\";\nimport TransitionGroup from \"react-transition-group/TransitionGroup\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\n\nvar Categorization =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Categorization, _Component);\n\n  function Categorization() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Categorization);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Categorization)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      category: \"\",\n      categoryImg: \"\",\n      categoryArr: [],\n      selectedCategory: \"\",\n      subcategory: \"\",\n      brand: \"\",\n      weight: \"\",\n      size: \"\",\n      color: \"\",\n      isOpenCategory: false,\n      isOpenSubcategory: false,\n      isOpenBrand: false,\n      isOpenWeight: false,\n      isOpenSize: false,\n      isOpenColor: false\n    };\n    return _this;\n  }\n\n  _createClass(Categorization, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onfetchCatalog();\n    }\n  }, {\n    key: \"postBrandHandler\",\n    value: function postBrandHandler() {\n      console.log(this.state.brand);\n      this.setState({\n        brand: \"\"\n      });\n    }\n  }, {\n    key: \"postWeightHandler\",\n    value: function postWeightHandler() {\n      console.log(this.state.weight);\n      this.setState({\n        weight: \"\"\n      });\n    }\n  }, {\n    key: \"postSizeHandler\",\n    value: function postSizeHandler() {\n      console.log(this.state.size);\n      this.setState({\n        size: \"\"\n      });\n    }\n  }, {\n    key: \"postColorHandler\",\n    value: function postColorHandler() {\n      console.log(this.state.color);\n      this.setState({\n        color: \"\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Categorization-Height\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Categorization\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        style: {\n          boxShadow: this.state.isOpenCategory ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\" : null\n        },\n        className: \"hover-row\",\n        onClick: function onClick() {\n          return _this2.setState(function (prevState, props) {\n            return {\n              isOpenCategory: !prevState.isOpenCategory\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Category\"), React.createElement(\"td\", {\n        className: \"dropdown-btn-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-caret-down dropdown-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))), this.state.isOpenCategory ? React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"more-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"input-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Category:\"), React.createElement(\"input\", {\n        className: \"input\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            category: e.target.value\n          });\n        },\n        value: this.state.category,\n        type: \"text\",\n        placeholder: \"Category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"input-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Category Image:\"), React.createElement(\"input\", {\n        className: \"input\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            categoryImg: e.target.value\n          });\n        },\n        value: this.state.categoryImg,\n        type: \"text\",\n        placeholder: \"Category Image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"submit\",\n        onClick: function onClick() {\n          return _this2.props.oncreateCategory(_this2.state.category, _this2.state.categoryImg);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        className: \"reset\",\n        onClick: function onClick() {\n          return _this2.setState({\n            category: \"\",\n            categoryImg: \"\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Reset\")), React.createElement(TransitionGroup, {\n        component: \"ul\",\n        className: \"list-ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.props.catalog.catalog.map(function (category) {\n        return React.createElement(CSSTransition, {\n          key: category.id,\n          classNames: \"fade\",\n          timeout: 400,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          className: \"list-li\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"input-edit\",\n          value: category.name,\n          onChange: function onChange(e) {\n            _this2.oneditCategory(category.id, e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }), React.createElement(\"i\", {\n          className: \"fas fa-camera\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }), React.createElement(\"i\", {\n          className: \"fas fa-times btn-icon\",\n          onClick: function onClick() {\n            _this2.props.onremoveCategory(category.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        })));\n      }))))) : null, React.createElement(\"tr\", {\n        style: {\n          boxShadow: this.state.isOpenSubcategory ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\" : null\n        },\n        className: \"hover-row\",\n        onClick: function onClick() {\n          return _this2.setState(function (prevState, props) {\n            return {\n              isOpenSubcategory: !prevState.isOpenSubcategory\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Subcategory\"), React.createElement(\"td\", {\n        className: \"dropdown-btn-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-caret-down dropdown-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }))), this.state.isOpenSubcategory ? React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"more-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"input-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Category:\"), React.createElement(\"select\", {\n        onChange: function onChange(e) {\n          return _this2.setState({\n            selectedCategory: e.target.options[e.target.selectedIndex].text\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, this.props.catalog.catalog.map(function (category) {\n        return React.createElement(\"option\", {\n          key: category.id,\n          value: category.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, category.name);\n      })), React.createElement(\"p\", {\n        className: \"input-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Subcategory:\"), React.createElement(\"input\", {\n        className: \"input\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            subcategory: e.target.value\n          });\n        },\n        value: this.state.subcategory,\n        type: \"text\",\n        placeholder: \"Subcategory\",\n        onKeyPress: function onKeyPress(e) {\n          if (e.key === \"Enter\") {\n            _this2.props.oncreateSubcategory(_this2.state.selectedCategory === \"\" ? _this2.props.catalog.catalog[0].id : _this2.state.selectedCategory, _this2.state.subcategory);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"submit\",\n        onClick: function onClick() {\n          return _this2.props.oncreateSubcategory(_this2.state.selectedCategory === \"\" ? _this2.props.catalog.catalog[0].id : _this2.state.selectedCategory, _this2.state.subcategory);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        className: \"reset\",\n        onClick: function onClick() {\n          return _this2.setState({\n            subcategory: \"\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Reset\")), React.createElement(TransitionGroup, {\n        component: \"ul\",\n        className: \"list-ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, this.props.catalog.catalog.map(function (category, index) {\n        if (category.name === _this2.state.selectedCategory) {\n          return category.subcategories.map(function (subcategory) {\n            return React.createElement(CSSTransition, {\n              key: subcategory.id,\n              classNames: \"fade\",\n              timeout: 400,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 242\n              },\n              __self: this\n            }, React.createElement(\"li\", {\n              className: \"list-li\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 247\n              },\n              __self: this\n            }, subcategory.name, React.createElement(\"i\", {\n              className: \"fas fa-times btn-icon\",\n              onClick: function onClick() {\n                _this2.props.onremoveSubcategory(category.id, subcategory.id);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 249\n              },\n              __self: this\n            })));\n          });\n        }\n\n        if (_this2.state.selectedCategory === \"\" && index === 0) {\n          return category.subcategories.map(function (subcategory) {\n            return React.createElement(CSSTransition, {\n              key: subcategory.id,\n              classNames: \"fade\",\n              timeout: 400,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 267\n              },\n              __self: this\n            }, React.createElement(\"li\", {\n              className: \"list-li\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 272\n              },\n              __self: this\n            }, subcategory.name, React.createElement(\"i\", {\n              className: \"fas fa-times btn-icon\",\n              onClick: function onClick() {\n                _this2.props.onremoveSubcategory(category.id, subcategory.id);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 274\n              },\n              __self: this\n            })));\n          });\n        }\n\n        return null;\n      }))))) : null))));\n    }\n  }]);\n\n  return Categorization;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    catalog: state.catalog\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onfetchCatalog: function onfetchCatalog() {\n      return dispatch(fetchCatalog());\n    },\n    oncreateCategory: function oncreateCategory(name, imageUrl) {\n      return dispatch(createCategory(name, imageUrl));\n    },\n    onremoveCategory: function onremoveCategory(categoryId) {\n      return dispatch(removeCategory(categoryId));\n    },\n    oncreateSubcategory: function oncreateSubcategory(subcategoryId, subcategoryName) {\n      return dispatch(createSubcategory(subcategoryId, subcategoryName));\n    },\n    onremoveSubcategory: function onremoveSubcategory(categoryId, subcategoryId) {\n      return dispatch(removeSubcategory(categoryId, subcategoryId));\n    },\n    oneditCategory: function oneditCategory(categoryId, categoryName) {\n      return dispatch(editCategory(categoryId, categoryName));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Categorization);","map":{"version":3,"sources":["C:\\Users\\bruno\\Desktop\\ecommerce\\src\\components\\Categorization\\Categorization.js"],"names":["React","Component","connect","fetchCatalog","createCategory","removeCategory","createSubcategory","removeSubcategory","editCategory","TransitionGroup","CSSTransition","Categorization","state","category","categoryImg","categoryArr","selectedCategory","subcategory","brand","weight","size","color","isOpenCategory","isOpenSubcategory","isOpenBrand","isOpenWeight","isOpenSize","isOpenColor","props","onfetchCatalog","console","log","setState","boxShadow","prevState","e","target","value","oncreateCategory","catalog","map","id","name","oneditCategory","onremoveCategory","options","selectedIndex","text","key","oncreateSubcategory","index","subcategories","onremoveSubcategory","mapStateToProps","mapDispatchToProps","dispatch","imageUrl","categoryId","subcategoryId","subcategoryName","categoryName"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Categorization.css\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchCatalog,\r\n  createCategory,\r\n  removeCategory,\r\n  createSubcategory,\r\n  removeSubcategory,\r\n  editCategory\r\n} from \"../../store/actions/indexStore\";\r\nimport TransitionGroup from \"react-transition-group/TransitionGroup\";\r\nimport CSSTransition from \"react-transition-group/CSSTransition\";\r\n\r\nclass Categorization extends Component {\r\n  state = {\r\n    category: \"\",\r\n    categoryImg: \"\",\r\n    categoryArr: [],\r\n    selectedCategory: \"\",\r\n    subcategory: \"\",\r\n    brand: \"\",\r\n    weight: \"\",\r\n    size: \"\",\r\n    color: \"\",\r\n    isOpenCategory: false,\r\n    isOpenSubcategory: false,\r\n    isOpenBrand: false,\r\n    isOpenWeight: false,\r\n    isOpenSize: false,\r\n    isOpenColor: false\r\n  };\r\n  componentDidMount() {\r\n    this.props.onfetchCatalog();\r\n  }\r\n  postBrandHandler() {\r\n    console.log(this.state.brand);\r\n    this.setState({ brand: \"\" });\r\n  }\r\n  postWeightHandler() {\r\n    console.log(this.state.weight);\r\n    this.setState({ weight: \"\" });\r\n  }\r\n  postSizeHandler() {\r\n    console.log(this.state.size);\r\n    this.setState({ size: \"\" });\r\n  }\r\n  postColorHandler() {\r\n    console.log(this.state.color);\r\n    this.setState({ color: \"\" });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Categorization-Height\">\r\n        <div className=\"Categorization\">\r\n          <table>\r\n            <tbody>\r\n              <tr\r\n                style={{\r\n                  boxShadow: this.state.isOpenCategory\r\n                    ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\"\r\n                    : null\r\n                }}\r\n                className=\"hover-row\"\r\n                onClick={() =>\r\n                  this.setState((prevState, props) => {\r\n                    return { isOpenCategory: !prevState.isOpenCategory };\r\n                  })\r\n                }\r\n              >\r\n                <td>Category</td>\r\n                <td className=\"dropdown-btn-wrapper\">\r\n                  <i className=\"fas fa-caret-down dropdown-btn\" />\r\n                </td>\r\n              </tr>\r\n              {this.state.isOpenCategory ? (\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    <div className=\"more-info\">\r\n                      <p className=\"input-info\">Category:</p>\r\n                      <input\r\n                        className=\"input\"\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            category: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.category}\r\n                        type=\"text\"\r\n                        placeholder=\"Category\"\r\n                      />\r\n                      <p className=\"input-info\">Category Image:</p>\r\n                      <input\r\n                        className=\"input\"\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            categoryImg: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.categoryImg}\r\n                        type=\"text\"\r\n                        placeholder=\"Category Image\"\r\n                      />\r\n                      <div className=\"buttons\">\r\n                        <button\r\n                          className=\"submit\"\r\n                          onClick={() =>\r\n                            this.props.oncreateCategory(\r\n                              this.state.category,\r\n                              this.state.categoryImg\r\n                            )\r\n                          }\r\n                        >\r\n                          Submit\r\n                        </button>\r\n                        <button\r\n                          className=\"reset\"\r\n                          onClick={() =>\r\n                            this.setState({ category: \"\", categoryImg: \"\" })\r\n                          }\r\n                        >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n                      <TransitionGroup component=\"ul\" className=\"list-ul\">\r\n                        {this.props.catalog.catalog.map(category => (\r\n                          <CSSTransition\r\n                            key={category.id}\r\n                            classNames=\"fade\"\r\n                            timeout={400}\r\n                          >\r\n                            <li className=\"list-li\">\r\n                              <input\r\n                                className=\"input-edit\"\r\n                                value={category.name}\r\n                                onChange={e => {\r\n                                  this.oneditCategory(\r\n                                    category.id,\r\n                                    e.target.value\r\n                                  );\r\n                                }}\r\n                              />\r\n                              <i className=\"fas fa-camera\"></i>\r\n                              <i\r\n                                className=\"fas fa-times btn-icon\"\r\n                                onClick={() => {\r\n                                  this.props.onremoveCategory(category.id);\r\n                                }}\r\n                              />\r\n                            </li>\r\n                          </CSSTransition>\r\n                        ))}\r\n                      </TransitionGroup>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ) : null}\r\n              <tr\r\n                style={{\r\n                  boxShadow: this.state.isOpenSubcategory\r\n                    ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\"\r\n                    : null\r\n                }}\r\n                className=\"hover-row\"\r\n                onClick={() =>\r\n                  this.setState((prevState, props) => {\r\n                    return { isOpenSubcategory: !prevState.isOpenSubcategory };\r\n                  })\r\n                }\r\n              >\r\n                <td>Subcategory</td>\r\n                <td className=\"dropdown-btn-wrapper\">\r\n                  <i className=\"fas fa-caret-down dropdown-btn\" />\r\n                </td>\r\n              </tr>\r\n              {this.state.isOpenSubcategory ? (\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    <div className=\"more-info\">\r\n                      <p className=\"input-info\">Category:</p>\r\n                      <select\r\n                        onChange={e =>\r\n                          this.setState({\r\n                            selectedCategory:\r\n                              e.target.options[e.target.selectedIndex].text\r\n                          })\r\n                        }\r\n                      >\r\n                        {this.props.catalog.catalog.map(category => (\r\n                          <option key={category.id} value={category.name}>\r\n                            {category.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      <p className=\"input-info\">Subcategory:</p>\r\n                      <input\r\n                        className=\"input\"\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            subcategory: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.subcategory}\r\n                        type=\"text\"\r\n                        placeholder=\"Subcategory\"\r\n                        onKeyPress={e => {\r\n                          if (e.key === \"Enter\") {\r\n                            this.props.oncreateSubcategory(\r\n                              this.state.selectedCategory === \"\"\r\n                                ? this.props.catalog.catalog[0].id\r\n                                : this.state.selectedCategory,\r\n                              this.state.subcategory\r\n                            );\r\n                          }\r\n                        }}\r\n                      />\r\n                      <div className=\"buttons\">\r\n                        <button\r\n                          className=\"submit\"\r\n                          onClick={() =>\r\n                            this.props.oncreateSubcategory(\r\n                              this.state.selectedCategory === \"\"\r\n                                ? this.props.catalog.catalog[0].id\r\n                                : this.state.selectedCategory,\r\n                              this.state.subcategory\r\n                            )\r\n                          }\r\n                        >\r\n                          Submit\r\n                        </button>\r\n                        <button\r\n                          className=\"reset\"\r\n                          onClick={() => this.setState({ subcategory: \"\" })}\r\n                        >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n                      <TransitionGroup component=\"ul\" className=\"list-ul\">\r\n                        {this.props.catalog.catalog.map((category, index) => {\r\n                          if (category.name === this.state.selectedCategory) {\r\n                            return category.subcategories.map(subcategory => (\r\n                              <CSSTransition\r\n                                key={subcategory.id}\r\n                                classNames=\"fade\"\r\n                                timeout={400}\r\n                              >\r\n                                <li className=\"list-li\">\r\n                                  {subcategory.name}\r\n                                  <i\r\n                                    className=\"fas fa-times btn-icon\"\r\n                                    onClick={() => {\r\n                                      this.props.onremoveSubcategory(\r\n                                        category.id,\r\n                                        subcategory.id\r\n                                      );\r\n                                    }}\r\n                                  />\r\n                                </li>\r\n                              </CSSTransition>\r\n                            ));\r\n                          }\r\n                          if (\r\n                            this.state.selectedCategory === \"\" &&\r\n                            index === 0\r\n                          ) {\r\n                            return category.subcategories.map(subcategory => (\r\n                              <CSSTransition\r\n                                key={subcategory.id}\r\n                                classNames=\"fade\"\r\n                                timeout={400}\r\n                              >\r\n                                <li className=\"list-li\">\r\n                                  {subcategory.name}\r\n                                  <i\r\n                                    className=\"fas fa-times btn-icon\"\r\n                                    onClick={() => {\r\n                                      this.props.onremoveSubcategory(\r\n                                        category.id,\r\n                                        subcategory.id\r\n                                      );\r\n                                    }}\r\n                                  />\r\n                                </li>\r\n                              </CSSTransition>\r\n                            ));\r\n                          }\r\n                          return null;\r\n                        })}\r\n                      </TransitionGroup>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ) : null}\r\n              {/* \r\n              <tr\r\n                style={{\r\n                  boxShadow: this.state.isOpenBrand\r\n                    ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\"\r\n                    : null\r\n                }}\r\n                className=\"hover-row\"\r\n                onClick={() =>\r\n                  this.setState((prevState, props) => {\r\n                    return { isOpenBrand: !prevState.isOpenBrand };\r\n                  })\r\n                }\r\n              >\r\n                <td>Brand</td>\r\n                <td className=\"dropdown-btn-wrapper\">\r\n                  <i className=\"fas fa-caret-down dropdown-btn\" />\r\n                </td>\r\n              </tr>\r\n              {this.state.isOpenBrand ? (\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    <div className=\"more-info\">\r\n                      <p className=\"input-info\">Brand:</p>\r\n                      <input\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            brand: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.brand}\r\n                        type=\"text\"\r\n                        placeholder=\"Brand\"\r\n                      />\r\n                      <div className=\"buttons\">\r\n                        <button\r\n                          className=\"submit\"\r\n                          onClick={() => this.postBrandHandler()}\r\n                        >\r\n                          Submit\r\n                        </button>\r\n                        <button\r\n                          className=\"reset\"\r\n                          onClick={() => this.setState({ brand: \"\" })}\r\n                        >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ) : null}\r\n              <tr\r\n                style={{\r\n                  boxShadow: this.state.isOpenWeight\r\n                    ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\"\r\n                    : null\r\n                }}\r\n                className=\"hover-row\"\r\n                onClick={() =>\r\n                  this.setState((prevState, props) => {\r\n                    return { isOpenWeight: !prevState.isOpenWeight };\r\n                  })\r\n                }\r\n              >\r\n                <td>Weight</td>\r\n                <td className=\"dropdown-btn-wrapper\">\r\n                  <i className=\"fas fa-caret-down dropdown-btn\" />\r\n                </td>\r\n              </tr>\r\n              {this.state.isOpenWeight ? (\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    <div className=\"more-info\">\r\n                      <p className=\"input-info\">Weight:</p>\r\n                      <input\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            weight: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.weight}\r\n                        type=\"text\"\r\n                        placeholder=\"Weight\"\r\n                      />\r\n                      <div className=\"buttons\">\r\n                        <button\r\n                          className=\"submit\"\r\n                          onClick={() => this.postWeightHandler()}\r\n                        >\r\n                          Submit\r\n                        </button>\r\n                        <button\r\n                          className=\"reset\"\r\n                          onClick={() => this.setState({ weight: \"\" })}\r\n                        >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ) : null}\r\n              <tr\r\n                style={{\r\n                  boxShadow: this.state.isOpenSize\r\n                    ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\"\r\n                    : null\r\n                }}\r\n                className=\"hover-row\"\r\n                onClick={() =>\r\n                  this.setState((prevState, props) => {\r\n                    return { isOpenSize: !prevState.isOpenSize };\r\n                  })\r\n                }\r\n              >\r\n                <td>Size</td>\r\n                <td className=\"dropdown-btn-wrapper\">\r\n                  <i className=\"fas fa-caret-down dropdown-btn\" />\r\n                </td>\r\n              </tr>\r\n              {this.state.isOpenSize ? (\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    <div className=\"more-info\">\r\n                      <p className=\"input-info\">Size:</p>\r\n                      <input\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            size: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.size}\r\n                        type=\"text\"\r\n                        placeholder=\"Size\"\r\n                      />\r\n                      <div className=\"buttons\">\r\n                        <button\r\n                          className=\"submit\"\r\n                          onClick={() => this.postSizeHandler()}\r\n                        >\r\n                          Submit\r\n                        </button>\r\n                        <button\r\n                          className=\"reset\"\r\n                          onClick={() => this.setState({ size: \"\" })}\r\n                        >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ) : null}\r\n              <tr\r\n                style={{\r\n                  boxShadow: this.state.isOpenColor\r\n                    ? \"0px 0px 10px 1px rgba(0, 0, 0, 0.08)\"\r\n                    : null\r\n                }}\r\n                className=\"hover-row\"\r\n                onClick={() =>\r\n                  this.setState((prevState, props) => {\r\n                    return { isOpenColor: !prevState.isOpenColor };\r\n                  })\r\n                }\r\n              >\r\n                <td>Color</td>\r\n                <td className=\"dropdown-btn-wrapper\">\r\n                  <i className=\"fas fa-caret-down dropdown-btn\" />\r\n                </td>\r\n              </tr>\r\n              {this.state.isOpenColor ? (\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    <div className=\"more-info\">\r\n                      <p className=\"input-info\">Color:</p>\r\n                      <input\r\n                        onChange={e => {\r\n                          this.setState({\r\n                            color: e.target.value\r\n                          });\r\n                        }}\r\n                        value={this.state.color}\r\n                        type=\"text\"\r\n                        placeholder=\"Color\"\r\n                      />\r\n                      <div className=\"buttons\">\r\n                        <button\r\n                          className=\"submit\"\r\n                          onClick={() => this.postColorHandler()}\r\n                        >\r\n                          Submit\r\n                        </button>\r\n                        <button\r\n                          className=\"reset\"\r\n                          onClick={() => this.setState({ color: \"\" })}\r\n                        >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ) : null}\r\n              */}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    catalog: state.catalog\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onfetchCatalog: () => dispatch(fetchCatalog()),\r\n    oncreateCategory: (name, imageUrl) =>\r\n      dispatch(createCategory(name, imageUrl)),\r\n    onremoveCategory: categoryId => dispatch(removeCategory(categoryId)),\r\n    oncreateSubcategory: (subcategoryId, subcategoryName) =>\r\n      dispatch(createSubcategory(subcategoryId, subcategoryName)),\r\n    onremoveSubcategory: (categoryId, subcategoryId) =>\r\n      dispatch(removeSubcategory(categoryId, subcategoryId)),\r\n    oneditCategory: (categoryId, categoryName) =>\r\n      dispatch(editCategory(categoryId, categoryName))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Categorization);\r\n"]},"metadata":{},"sourceType":"module"}