{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport var updateProductOrderQuantity = function updateProductOrderQuantity(inputValue, productId, products) {\n  var productsState = _toConsumableArray(products);\n\n  var productsLs = localStorage.getItem(\"product\").split(\",\");\n  var quantityLs = localStorage.getItem(\"quantity\").split(\",\");\n  var index = productsLs.indexOf(productId);\n\n  if (inputValue < 1) {\n    quantityLs.splice(index, 1);\n    productsLs.splice(index, 1);\n    localStorage.setItem(\"quantity\", quantityLs);\n    localStorage.setItem(\"product\", productsLs);\n    productsState.splice(index, 1);\n  } else {\n    quantityLs[index] = inputValue;\n    localStorage.setItem(\"quantity\", quantityLs);\n\n    for (var p = 0; p < products.length; p++) {\n      if (productsState[p].id === productId) {\n        productsState[p].quantityCart = inputValue;\n      }\n    }\n  }\n\n  return {\n    type: actionTypes.UPDATE_PRODUCT_ORDER_QUANTITY,\n    products: productsState,\n    total: calculateTotal(quantityLs)\n  };\n};\nexport var addProductOrder = function addProductOrder(productId) {\n  console.log(\"used\");\n  var products = localStorage.getItem(\"product\");\n  var quantity = localStorage.getItem(\"quantity\");\n  var arrProducts = [];\n  var arrQuantity = [];\n\n  if (products !== null && products !== \"\") {\n    arrProducts = products.split(\",\");\n    arrQuantity = quantity.split(\",\");\n\n    if (arrProducts.indexOf(productId) === -1) {\n      arrProducts.push(productId);\n      arrQuantity.push(1);\n    } else {\n      var indexOfProduct = arrProducts.indexOf(productId);\n      var prevQuantity = parseInt(arrQuantity[indexOfProduct], 10) + 1;\n      arrQuantity[indexOfProduct] = prevQuantity;\n    }\n  } else {\n    arrProducts = [productId];\n    arrQuantity = [1];\n  }\n\n  localStorage.setItem(\"product\", arrProducts);\n  localStorage.setItem(\"quantity\", arrQuantity);\n  return {\n    type: actionTypes.ADD_PRODUCT_ORDER,\n    products: arrProducts,\n    total: calculateTotal(arrQuantity)\n  };\n};\nexport var fetchProductOrder = function fetchProductOrder() {\n  return function (dispatch) {\n    if (localStorage.getItem(\"product\") !== null) {\n      var products = localStorage.getItem(\"product\").split(\",\");\n      axios({\n        method: \"post\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        data: products,\n        url: \"http://localhost:8086/products/arr\"\n      }).then(function (res) {\n        var quantityLs = localStorage.getItem(\"quantity\").split(\",\");\n\n        var productsState = _toConsumableArray(res.data);\n\n        for (var p = 0; p < productsState.length; p++) {\n          productsState[p].quantityCart = quantityLs[p];\n        }\n\n        dispatch({\n          type: actionTypes.FETCH_PRODUCT_ORDER,\n          products: productsState,\n          total: calculateTotal(quantityLs)\n        });\n      });\n    }\n  };\n};\n\nvar calculateTotal = function calculateTotal(arrQuantity) {\n  var total = 0;\n\n  for (var q = 0; q < arrQuantity.length; q++) {\n    total += parseInt(arrQuantity[q], 10);\n  }\n\n  return total;\n};","map":{"version":3,"sources":["C:\\Users\\bruno\\Desktop\\ecommerce\\src\\store\\actions\\orderAction.js"],"names":["actionTypes","axios","updateProductOrderQuantity","inputValue","productId","products","productsState","productsLs","localStorage","getItem","split","quantityLs","index","indexOf","splice","setItem","p","length","id","quantityCart","type","UPDATE_PRODUCT_ORDER_QUANTITY","total","calculateTotal","addProductOrder","console","log","quantity","arrProducts","arrQuantity","push","indexOfProduct","prevQuantity","parseInt","ADD_PRODUCT_ORDER","fetchProductOrder","dispatch","method","headers","data","url","then","res","FETCH_PRODUCT_ORDER","q"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const updateProductOrderQuantity = (inputValue, productId, products) => {\r\n  let productsState = [...products];\r\n  let productsLs = localStorage.getItem(\"product\").split(\",\");\r\n  let quantityLs = localStorage.getItem(\"quantity\").split(\",\");\r\n  const index = productsLs.indexOf(productId);\r\n  if (inputValue < 1) {\r\n    quantityLs.splice(index, 1);\r\n    productsLs.splice(index, 1);\r\n    localStorage.setItem(\"quantity\", quantityLs);\r\n    localStorage.setItem(\"product\", productsLs);\r\n    productsState.splice(index, 1);\r\n  } else {\r\n    quantityLs[index] = inputValue;\r\n    localStorage.setItem(\"quantity\", quantityLs);\r\n    for (let p = 0; p < products.length; p++) {\r\n      if (productsState[p].id === productId) {\r\n        productsState[p].quantityCart = inputValue;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    type: actionTypes.UPDATE_PRODUCT_ORDER_QUANTITY,\r\n    products: productsState,\r\n    total: calculateTotal(quantityLs)\r\n  };\r\n};\r\n\r\nexport const addProductOrder = productId => {\r\n  console.log(\"used\");\r\n  \r\n  let products = localStorage.getItem(\"product\");\r\n  let quantity = localStorage.getItem(\"quantity\");\r\n  let arrProducts = [];\r\n  let arrQuantity = [];\r\n  if (products !== null && products !== \"\") {\r\n    arrProducts = products.split(\",\");\r\n    arrQuantity = quantity.split(\",\");\r\n    if (arrProducts.indexOf(productId) === -1) {\r\n      arrProducts.push(productId);\r\n      arrQuantity.push(1);\r\n    } else {\r\n      const indexOfProduct = arrProducts.indexOf(productId);\r\n      let prevQuantity = parseInt(arrQuantity[indexOfProduct], 10) + 1;\r\n      arrQuantity[indexOfProduct] = prevQuantity;\r\n    }\r\n  } else {\r\n    arrProducts = [productId];\r\n    arrQuantity = [1];\r\n  }\r\n  localStorage.setItem(\"product\", arrProducts);\r\n  localStorage.setItem(\"quantity\", arrQuantity);\r\n  return {\r\n    type: actionTypes.ADD_PRODUCT_ORDER,\r\n    products: arrProducts,\r\n    total: calculateTotal(arrQuantity)\r\n  };\r\n};\r\n\r\nexport const fetchProductOrder = () => {\r\n  return dispatch => {\r\n    if (localStorage.getItem(\"product\") !== null) {\r\n      let products = localStorage.getItem(\"product\").split(\",\");\r\n      axios({\r\n        method: \"post\",\r\n        headers: { \"content-type\": \"application/json\" },\r\n        data: products,\r\n        url: \"http://localhost:8086/products/arr\"\r\n      }).then(res => {\r\n        let quantityLs = localStorage.getItem(\"quantity\").split(\",\");\r\n        let productsState = [...res.data];\r\n        for (let p = 0; p < productsState.length; p++) {\r\n          productsState[p].quantityCart = quantityLs[p];\r\n        }\r\n        dispatch({\r\n          type: actionTypes.FETCH_PRODUCT_ORDER,\r\n          products: productsState,\r\n          total: calculateTotal(quantityLs)\r\n        });\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nconst calculateTotal = arrQuantity => {\r\n  let total = 0;\r\n  for (let q = 0; q < arrQuantity.length; q++) {\r\n    total += parseInt(arrQuantity[q], 10);\r\n  }\r\n  return total;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}