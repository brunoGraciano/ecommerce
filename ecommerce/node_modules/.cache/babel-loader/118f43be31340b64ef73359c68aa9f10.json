{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\bruno\\\\Desktop\\\\ecommerce\\\\src\\\\components\\\\Users\\\\Users.js\";\nimport React, { Component } from \"react\";\nimport \"./Users.css\"; //import axios from \"axios\";\n//import { getCookie } from \"../Util/Util\";\n\nimport Switch from \"../UI/Switch/Switch\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\n\nvar Users =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Users, _Component);\n\n  function Users() {\n    _classCallCheck(this, Users);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Users).apply(this, arguments));\n  }\n\n  _createClass(Users, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onfetchUsers();\n    }\n    /*changeRoleUserHandler(role, user, index) {\r\n      let id;\r\n      if (role === \"Admin\") {\r\n        id = 2;\r\n      } else if (role === \"User\") {\r\n        id = 1;\r\n      }\r\n      let r = \"ROLE_\" + role.toUpperCase();\r\n      user.roles[0].id = id;\r\n      user.roles[0].name = r;\r\n      axios\r\n        .put(\r\n          `http://localhost:8087/secure/users/${user.id}?access_token=${getCookie(\r\n            \"Session\"\r\n          )}`,\r\n          user\r\n        )\r\n        .then(res => {\r\n          if (res.status === 200) {\r\n            let userArr = this.state.users;\r\n            userArr[index] = user;\r\n            this.setState({ users: userArr });\r\n          }\r\n        });\r\n    }\r\n    changeEnableUserHandler(enable, user, index) {\r\n      user.enabled = enable;\r\n      user.accountNonExpired = enable;\r\n      user.accountNonLocked = enable;\r\n      user.account_non_expired = enable;\r\n      user.account_non_locked = enable;\r\n      user.credentialsNonExpired = enable;\r\n      axios\r\n        .put(\r\n          `http://localhost:8087/secure/users/${user.id}?access_token=${getCookie(\r\n            \"Session\"\r\n          )}`,\r\n          user\r\n        )\r\n        .then(res => {\r\n          if (res.status === 200) {\r\n            let userArr = this.state.users;\r\n            userArr[index] = user;\r\n            this.setState({ users: userArr });\r\n          }\r\n        });\r\n    }*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Users\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Users;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onUserAdded: function onUserAdded(user) {\n      return dispatch(addUser(user));\n    },\n    onUserRemoved: function onUserRemoved(username) {\n      return dispatch(removeUser(username));\n    },\n    onfetchUsers: function onfetchUsers() {\n      return dispatch(fetchUsers());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);","map":{"version":3,"sources":["C:\\Users\\bruno\\Desktop\\ecommerce\\src\\components\\Users\\Users.js"],"names":["React","Component","Switch","connect","actions","Users","props","onfetchUsers","mapStateToProps","state","console","log","user","mapDispatchToProps","dispatch","onUserAdded","addUser","onUserRemoved","username","removeUser","fetchUsers"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP,C,CACA;AACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;;IAEMC,K;;;;;;;;;;;;;wCACgB;AAClB,WAAKC,KAAL,CAAWC,YAAX;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA+CS;AACP,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD;;;;EAzDiBN,S;;AA4DpB,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,SAAO;AACLG,IAAAA,IAAI,EAAEH,KAAK,CAACG;AADP,GAAP;AAGD,CAND;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLC,IAAAA,WAAW,EAAE,qBAAAH,IAAI;AAAA,aAAIE,QAAQ,CAACE,OAAO,CAACJ,IAAD,CAAR,CAAZ;AAAA,KADZ;AAELK,IAAAA,aAAa,EAAE,uBAAAC,QAAQ;AAAA,aAAIJ,QAAQ,CAACK,UAAU,CAACD,QAAD,CAAX,CAAZ;AAAA,KAFlB;AAGLX,IAAAA,YAAY,EAAE;AAAA,aAAMO,QAAQ,CAACM,UAAU,EAAX,CAAd;AAAA;AAHT,GAAP;AAKD,CAND;;AAQA,eAAejB,OAAO,CACpBK,eADoB,EAEpBK,kBAFoB,CAAP,CAGbR,KAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Users.css\";\r\n//import axios from \"axios\";\r\n//import { getCookie } from \"../Util/Util\";\r\nimport Switch from \"../UI/Switch/Switch\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nclass Users extends Component {\r\n  componentDidMount() {\r\n    this.props.onfetchUsers();  \r\n  }\r\n  /*changeRoleUserHandler(role, user, index) {\r\n    let id;\r\n    if (role === \"Admin\") {\r\n      id = 2;\r\n    } else if (role === \"User\") {\r\n      id = 1;\r\n    }\r\n    let r = \"ROLE_\" + role.toUpperCase();\r\n    user.roles[0].id = id;\r\n    user.roles[0].name = r;\r\n    axios\r\n      .put(\r\n        `http://localhost:8087/secure/users/${user.id}?access_token=${getCookie(\r\n          \"Session\"\r\n        )}`,\r\n        user\r\n      )\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          let userArr = this.state.users;\r\n          userArr[index] = user;\r\n          this.setState({ users: userArr });\r\n        }\r\n      });\r\n  }\r\n  changeEnableUserHandler(enable, user, index) {\r\n    user.enabled = enable;\r\n    user.accountNonExpired = enable;\r\n    user.accountNonLocked = enable;\r\n    user.account_non_expired = enable;\r\n    user.account_non_locked = enable;\r\n    user.credentialsNonExpired = enable;\r\n    axios\r\n      .put(\r\n        `http://localhost:8087/secure/users/${user.id}?access_token=${getCookie(\r\n          \"Session\"\r\n        )}`,\r\n        user\r\n      )\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          let userArr = this.state.users;\r\n          userArr[index] = user;\r\n          this.setState({ users: userArr });\r\n        }\r\n      });\r\n  }*/\r\n  render() {\r\n    return (\r\n      <div className=\"Users\">\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  \r\n  return {\r\n    user: state.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onUserAdded: user => dispatch(addUser(user)),\r\n    onUserRemoved: username => dispatch(removeUser(username)),\r\n    onfetchUsers: () => dispatch(fetchUsers())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Users);\r\n"]},"metadata":{},"sourceType":"module"}